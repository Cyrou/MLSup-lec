Created on Sat Dec  1 11:09:38 2018

#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sat Dec  1 11:09:38 2018

@author: cyrilrousset
"""
import pandas as pd
import numpy as np
import random
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from numpy import linalg as LA

#Linéairement séparables ?

x=pd.read_csv('/Users/cyrilrousset/Desktop/data_set_2_X.csv')
y=pd.read_csv('/Users/cyrilrousset/Desktop/data_set_2_Y.csv')

#Plotage x2 fonction de x1
x1red=[]
x2red=[]
x1blue=[]
x2blue=[]

for i in range(len(x)):
    if y.iloc[i][0]==-1 :
        x1red.append(x.iloc[i][0])
        x2red.append(x.iloc[i][1])
    else:
        x1blue.append(x.iloc[i][0])
        x2blue.append(x.iloc[i][1])
        
plt.plot(x1blue,x2blue,'bo')
plt.plot(x1red,x2red,'ro')
plt.title('x2-x1')
plt.xlabel('x1')
plt.ylabel('x2')
plt.show

x1red.clear
x2red.clear
x1blue.clear
x2blue.clear



#Q1 (Error in function of mu)

dataX=pd.read_csv('/Users/cyrilrousset/Desktop/data_set_2_X.csv')
dataY=np.ravel(pd.read_csv('/Users/cyrilrousset/Desktop/data_set_2_Y.csv'))

mprime = 1000
eta = 0.5
T = mprime
mu=0.01
val = [0.00001, 0.00005, 0.0001, 0.0005, 0.001,0.005,0.01,0.05,0.1 ]
error_res = []
for mu in val:
    error_tab = []
    for j in range(10): 
        w=np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
        X_train, X_test, y_train, y_test = train_test_split(dataX,dataY, train_size=0.01, random_state=0)
        for t in range (T) :
            i = random.randint(0,len(X_train)-1) 
            v = 2*mu*w[t]
            if (  y_train[i]*np.dot(w[t],X_train.values[i])  < 1 ) :
                v = v - y_train[i]*X_train.values[i]
            temp = w[t]-eta*v
            w = np.append(w,[temp],axis = 0)
        w_res = w.mean(0)
        error = 0
        for i in range(len(X_test)-1):
          #  print('value =',y_test[i]*np.dot(w_res,X_test.values[i]))
            if ( y_test[i]*np.dot(w_res,X_test.values[i]) < 1 ) :
                error = error + ((1 - y_test[i]*np.dot(w_res,X_test.values[i])))/(len(X_test))
        error_tab.append(error)
    error_mean = np.mean(error_tab)
    error_res.append(error_mean)
plt.plot(val, error_res)


#Q2 (Minimum value)
min_error=min(error_res)
min_mu=val[error_res.index(min_error)]
print('min_error: {}'.format(min_error))
print('min_mu: {}'.format(min_mu))

#Q3 (w/norm(w))
mprime = 1000
feta = 0.5
T = mprime
mu=min_mu
val=[0.1]
for mu in val:
       for j in range(10): 
        
        w=np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])
        
    
    
        
        X_train, X_test, y_train, y_test = train_test_split(dataX,dataY, train_size=mprime/len(dataX), random_state=0)
        for t in range (T) :
            i = random.randint(0,len(X_train)-1)
            v = 2*mu*w[t]
            if (  y_train[i]*np.dot(w[t],X_train.values[i])  < 1 ) :
                v = v - y_train[i]*X_train.values[i]
            temp = w[t]-eta*v
            w = np.append(w,[temp],axis = 0)
       w_res = w.mean(0)
print('w_res=',w_res/LA.norm(w_res))





